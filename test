    public Mono<User> validateClientIdAndRoleInUrl(String clientId, String originalUrl, ServerWebExchange exchange) {
        logger.info("Validating token and role");
        // Step 1: Extract the role from the URL
        String[] urlParts = originalUrl.split("/");
        if (urlParts.length < 2) {
            return onError(exchange, "Invalid URL format" , HttpStatus.BAD_GATEWAY).then(Mono.empty());
        }
        String roleInUrl = urlParts[1];

        // Step 2: Check if clientId exists in the credentials map
        AuthCredentials credentials = authConfig.getCredentials();
        boolean clientIdExists = credentials.getUsers().stream().anyMatch(key -> key.getClientid().equalsIgnoreCase(clientId));

        if (!clientIdExists) {
            return onError(exchange, "Client ID not found", HttpStatus.NOT_FOUND)
                    .then(Mono.empty());
        }

        // Find the role associated with the clientId
        User user = getRoleByClientId(clientId, authConfig.getCredentials());

        if (user == null) {
            return onError(exchange, "Role is not mapped for clientId: " + clientId, HttpStatus.NOT_FOUND).then(Mono.empty());
        }
        String userRole = user.getRole();
        if (userRole == null) {
            return onError(exchange, "Role is not mapped for clientId: " + clientId, HttpStatus.NOT_FOUND).then(Mono.empty());
        }
        if (!userRole.equalsIgnoreCase(roleInUrl)) {
            return onError(exchange, "Role is not matched. Access denied", HttpStatus.FORBIDDEN).then(Mono.empty());
        }
        logger.info("ClientID and Role is validated successfully: clientID:- {} , Role:- {}", clientId, user.getRole());
        return Mono.just(user);
    }
