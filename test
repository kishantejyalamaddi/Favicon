  @Mock
    private AuthConfig authConfig;

    @Mock
    private CacheService cacheService;

    @Mock
    private ApplicationProperties properties;

    @Mock
    private WebClient webClient;

    @Mock
    private ServerWebExchange exchange;

    @Mock
    private ServerHttpRequest request;

    @Mock
    private ServerHttpResponse response;

    @Mock
    private GatewayFilterChain chain;

    @InjectMocks
    private AuthenticationFilter filter;

    @BeforeEach
    void setup() {
        filter = new AuthenticationFilter(WebClient.builder());
        when(exchange.getRequest()).thenReturn(request);
        when(exchange.getResponse()).thenReturn(response);
    }

    @Test
    void testApply_WhenAuthorizationTokenMissing_ShouldReturnUnauthorized() {
        // Arrange
        when(request.getHeaders()).thenReturn(new HttpHeaders());

        // Act
        Mono<Void> result = filter.apply(new AuthenticationFilter.Config()).filter(exchange, chain);

        // Assert
        StepVerifier.create(result)
                .expectComplete()
                .verify();

        verify(response).setStatusCode(UNAUTHORIZED);
    }

    @Test
    void testApply_WhenTokenDecodedAndClientIdMissing_ShouldReturnUnauthorized() {
        // Arrange
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.AUTHORIZATION, "Bearer some.invalid.token");
        when(request.getHeaders()).thenReturn(headers);

        // Mock the token decoding process
        when(exchange.getRequest()).thenReturn(request);
        when(filter.decodeToken(any(), any()))
                .thenReturn(Mono.empty());

        // Act
        Mono<Void> result = filter.apply(new AuthenticationFilter.Config()).filter(exchange, chain);

        // Assert
        StepVerifier.create(result)
                .expectComplete()
                .verify();

        verify(response).setStatusCode(UNAUTHORIZED);
    }

    @Test
    void testApply_WhenMethodNotAllowed_ShouldReturnMethodNotAllowed() {
        // Arrange
        when(request.getMethod()).thenReturn(GET); // Simulate a GET method
        when(request.getHeaders()).thenReturn(new HttpHeaders());

        // Mock route metadata to disallow GET
        when(exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR)).thenReturn(createMockRoute("POST"));

        // Act
        Mono<Void> result = filter.apply(new AuthenticationFilter.Config()).filter(exchange, chain);

        // Assert
        StepVerifier.create(result)
                .expectComplete()
                .verify();

        verify(response).setStatusCode(HttpStatus.METHOD_NOT_ALLOWED);
    }

    private Route createMockRoute(String allowedMethods) {
        Route route = Mockito.mock(Route.class);
        Map<String, Object> metadata = new HashMap<>();
        metadata.put("method", allowedMethods);
        when(route.getMetadata()).thenReturn(metadata);
        return route;
    }

    @Test
    void testApply_WhenValidTokenAndRequest_ShouldProceedWithRequest() {
        // Arrange
        String token = "valid.token";
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.AUTHORIZATION, "Bearer " + token);

        when(request.getHeaders()).thenReturn(headers);
        when(request.getURI()).thenReturn(URI.create("http://localhost/test"));
        when(request.getMethod()).thenReturn(GET);
        
        // Simulate valid token decoding
        TokenPayload tokenPayload = new TokenPayload();
        tokenPayload.setAud("client-id");
        when(filter.decodeToken(any(), any())).thenReturn(Mono.just(tokenPayload));

        // Simulate cacheService.getOrFetchToken
        when(cacheService.getOrFetchToken(any(), any(), any(), any()))
                .thenReturn(Mono.just("fetched-token"));

        // Act
        Mono<Void> result = filter.apply(new AuthenticationFilter.Config()).filter(exchange, chain);

        // Assert
        StepVerifier.create(result)
                .expectComplete()
                .verify();

        verify(chain).filter(exchange);
    }
