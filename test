class YourServiceTest {

    @Mock
    private AuthConfig authConfig;

    @Mock
    private ServerWebExchange exchange;

    @InjectMocks
    private YourService yourService;  // Replace with your actual service class name

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testValidateClientIdAndRoleInUrl_HappyPath() {
        // Given
        String clientId = "client1";
        String originalUrl = "/admin"; // The role in the URL
        String expectedRole = "admin"; // The expected role for the user

        User user = new User(clientId, expectedRole); // Mock User with matching role

        // Mock AuthCredentials and its behavior
        AuthCredentials credentials = mock(AuthCredentials.class);
        when(authConfig.getCredentials()).thenReturn(credentials);
        when(credentials.getUsers()).thenReturn(Arrays.asList(user)); // Mocking the list of users

        // Mock getRoleByClientId to return the user
        when(yourService.getRoleByClientId(clientId, credentials)).thenReturn(user);

        // When
        Mono<User> result = yourService.validateClientIdAndRoleInUrl(clientId, originalUrl, exchange);

        // Then
        StepVerifier.create(result)
                .expectNext(user) // Expect the user to be returned
                .verifyComplete(); // Verify that the Mono completes without errors

        // Optionally, you can verify that logging occurs
        // Add verification for the logger if needed
        // For example, you could use a logging framework or a custom logger for this purpose.
    }
}
