package com.tep.qtestwrapper.tests;

import com.tep.qtestwrapper.config.ApplicationProperties;
import com.tep.qtestwrapper.filter.AuthenticationFilter;
import com.tep.qtestwrapper.model.AuthCredentials;
import com.tep.qtestwrapper.model.TokenPayload;
import com.tep.qtestwrapper.service.AuthConfig;
import com.tep.qtestwrapper.service.CacheService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.Mockito.*;
import static org.springframework.http.HttpStatus.UNAUTHORIZED;

class AuthenticationFilterTest {

    @Mock
    private AuthConfig authConfig;

    @Mock
    private CacheService cacheService;

    @Mock
    private ApplicationProperties properties;

    @Mock
    private WebClient webClient;

    @Mock
    private ServerWebExchange exchange;

    @Mock
    private ServerHttpRequest request;

    @Mock
    private ServerHttpResponse response;

    @Mock
    private GatewayFilterChain chain;

    @InjectMocks
    private AuthenticationFilter filter;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this); // Initialize mocks

        // Mock the behavior of exchange.getRequest() and exchange.getResponse()
        when(exchange.getRequest()).thenReturn(request);
        when(exchange.getResponse()).thenReturn(response);
    }

    @Test
    void testApply_WhenAuthorizationTokenMissing_ShouldReturnUnauthorized() {
        // Arrange
        when(request.getHeaders()).thenReturn(new HttpHeaders());

        // Act
        Mono<Void> result = filter.apply(new AuthenticationFilter.Config()).filter(exchange, chain);

        // Assert
        StepVerifier.create(result)
                .expectComplete()
                .verify();

        verify(response).setStatusCode(UNAUTHORIZED);
    }

    @Test
    void testApply_WhenTokenDecodedAndClientIdMissing_ShouldReturnUnauthorized() {
        // Arrange
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.AUTHORIZATION, "Bearer some.invalid.token");
        when(request.getHeaders()).thenReturn(headers);

        // Mock the token decoding process
        TokenPayload tokenPayload = new TokenPayload();
        tokenPayload.setAud(null);
        when(filter.decodeToken(any(), any())).thenReturn(Mono.just(tokenPayload));

        // Act
        Mono<Void> result = filter.apply(new AuthenticationFilter.Config()).filter(exchange, chain);

        // Assert
        StepVerifier.create(result)
                .expectComplete()
                .verify();

        verify(response).setStatusCode(UNAUTHORIZED);
    }
}
