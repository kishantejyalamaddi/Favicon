    private AuthenticationFilter authenticationFilter;
    private AuthConfig authConfig;
    private ServerWebExchange exchange;

    @BeforeEach
    public void setUp() {
        authConfig = mock(AuthConfig.class);
        authenticationFilter = new AuthenticationFilter(null); // pass a WebClient.Builder if needed
        authenticationFilter.authConfig = authConfig; // Inject the mock
        
        // Mocking ServerWebExchange and its components
        exchange = mock(ServerWebExchange.class);
        ServerHttpRequest request = mock(ServerHttpRequest.class);
        ServerHttpResponse response = mock(ServerHttpResponse.class);
        
        when(exchange.getRequest()).thenReturn(request);
        when(exchange.getResponse()).thenReturn(response);
    }

    @Test
    public void testValidateClientIdAndRoleInUrl_HappyPath() {
        // Prepare the test data
        String clientId = "testClientId";
        String originalUrl = "/admin/resource";
        
        // Create a User and AuthCredentials mock
        User user = new User();
        user.setClientid(clientId);
        user.setRole("admin");
        
        AuthCredentials authCredentials = new AuthCredentials();
        authCredentials.setUsers(Collections.singletonList(user));
        
        // Stub the behavior of authConfig
        when(authConfig.getCredentials()).thenReturn(authCredentials);

        // Call the method under test
        Mono<User> result = authenticationFilter.validateClientIdAndRoleInUrl(clientId, originalUrl, exchange);
        
        // Verify the result
        User returnedUser = result.block(); // Block to get the result for the assertion
        assertEquals(user, returnedUser); // Check if the returned user is as expected
    }
