public Mono<Object> extractRequestBody(ServerHttpRequest request) {
    if (request.getMethod() == HttpMethod.GET || request.getMethod() == HttpMethod.DELETE) {
        // For GET and DELETE requests, return an empty string or empty DataBuffer
        return Mono.just("");
    }

    String contentType = request.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);
    if (contentType != null && contentType.equals(MediaType.APPLICATION_JSON_VALUE)) {
        // Handle JSON request body (convert to String)
        return DataBufferUtils.join(request.getBody())
                .flatMap(dataBuffer -> {
                    byte[] requestBodyBytes = new byte[dataBuffer.readableByteCount()];
                    dataBuffer.read(requestBodyBytes);
                    DataBufferUtils.release(dataBuffer); // Release the DataBuffer
                    // Convert bytes to String (for JSON)
                    String requestBody = new String(requestBodyBytes, StandardCharsets.UTF_8);
                    return Mono.just(requestBody); // Return as String
                })
                .switchIfEmpty(Mono.just("")); // Return empty string if no body
    } else {
        // Handle other content types (e.g., file uploads)
        return DataBufferUtils.join(request.getBody())
                .flatMap(dataBuffer -> {
                    byte[] fileBytes = new byte[dataBuffer.readableByteCount()];
                    dataBuffer.read(fileBytes);
                    DataBufferUtils.release(dataBuffer); // Release the DataBuffer
                    return Mono.just(fileBytes); // Return as byte array for file data
                })
                .switchIfEmpty(Mono.just(new byte[0])); // Return empty byte array if no body
    }
}



return extractRequestBody(request)
        .flatMap(requestBody -> {
            String contentType = request.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);
            if (contentType == null) {
                contentType = MediaType.APPLICATION_JSON_VALUE; // Default to JSON if not specified
            }

            WebClient.RequestBodySpec requestSpec = webClient
                    .method(request.getMethod())
                    .uri(targetHostName + finalNewPath)
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                    .header(HttpHeaders.CONTENT_TYPE, contentType);

            // Copy user-added headers from ServerHttpRequest to WebClient.RequestBodySpec
            request.getHeaders().forEach((headerName, headerValues) -> {
                if (!excludedHeaders.contains(headerName) && !headerName.toLowerCase().startsWith("x-")) {
                    headerValues.forEach(value -> requestSpec.header(headerName, value));
                }
            });

            if (request.getMethod() == HttpMethod.POST || request.getMethod() == HttpMethod.PUT) {
                // Handle JSON and file differently
                if (requestBody instanceof String) {
                    // If it's a JSON body, pass it as a string
                    return requestSpec.bodyValue(requestBody)
                            .exchangeToMono(response -> response.toEntity(String.class)
                                    .flatMap(resEntity -> handleResponse(exchange, resEntity)));
                } else if (requestBody instanceof byte[]) {
                    // If it's file data, pass it as byte array (binary)
                    return requestSpec.bodyValue(requestBody)
                            .exchangeToMono(response -> response.toEntity(String.class)
                                    .flatMap(resEntity -> handleResponse(exchange, resEntity)));
                }
            } else {
                return requestSpec
                        .exchangeToMono(response -> response.toEntity(String.class)
                                .flatMap(resEntity -> handleResponse(exchange, resEntity)));
            }
        });






