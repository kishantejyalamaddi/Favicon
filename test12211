public Mono<DataBuffer> extractRequestBody(ServerHttpRequest request) {
    if (request.getMethod() == HttpMethod.GET || request.getMethod() == HttpMethod.DELETE) {
        return Mono.just(new DefaultDataBufferFactory().wrap(new byte[0]));
    }

    return DataBufferUtils.join(request.getBody())
            .flatMap(dataBuffer -> {
                return Mono.just(dataBuffer);
            })
            .switchIfEmpty(Mono.just(new DefaultDataBufferFactory().wrap(new byte[0])));
}

return extractRequestBody(request)
        .flatMap(requestBody -> {
            String contentType = request.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);
            if (contentType == null) {
                contentType = MediaType.APPLICATION_JSON_VALUE;
            }

            WebClient.RequestBodySpec requestSpec = webClient
                    .method(request.getMethod())
                    .uri(targetHostName + finalNewPath)
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                    .header(HttpHeaders.CONTENT_TYPE, contentType);

            request.getHeaders().forEach((headerName, headerValues) -> {
                if (!excludedHeaders.contains(headerName) && !headerName.toLowerCase().startsWith("x-")) {
                    headerValues.forEach(value -> requestSpec.header(headerName, value));
                }
            });

            if (request.getMethod() == HttpMethod.POST || request.getMethod() == HttpMethod.PUT) {
                return requestSpec
                        .bodyValue(requestBody)
                        .exchangeToMono(response -> response.toEntity(String.class)
                                .flatMap(resEntity -> handleResponse(exchange, resEntity)));
            } else {
                return requestSpec
                        .exchangeToMono(response -> response.toEntity(String.class)
                                .flatMap(resEntity -> handleResponse(exchange, resEntity)));
            }
        });
